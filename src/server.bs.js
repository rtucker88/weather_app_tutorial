// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/src/Express.js");
var Process = require("process");
var SearchLocations$WeatherAppTutorial = require("./routes/api/SearchLocations.bs.js");

var app = Express.express(/* () */0);

var router = Express.router(/* Some */[true], /* None */0, /* Some */[true], /* () */0);

Express.Router[/* use */0](router, Express.Middleware[/* json */0](/* None */0, /* None */0, /* Some */[Express.ByteLimit[/* mb */2](5.0)], /* () */0));

Express.Router[/* use */0](router, Express.Middleware[/* urlencoded */3](/* Some */[true], /* None */0, /* None */0, /* None */0, /* () */0));

Express.App[/* useRouterOnPath */18](app, "/", router);

SearchLocations$WeatherAppTutorial.Routes[/* routes */0](router);

Express.Router[/* get */4](router, "/", Express.Middleware[/* from */5]((function (_, _$1) {
            var partial_arg = Express.Response[/* sendString */2];
            return (function (param) {
                return partial_arg("PORT 5000", param);
              });
          })));

Express.App[/* get */4](app, "/error", Express.Middleware[/* from */5]((function (_, _$1, res) {
            return Express.Response[/* sendString */2]("Internal Server Error", Express.Response[/* status */9](/* InternalServerError */47)(res));
          })));

function onListen(e) {
  var exit = 0;
  var val;
  try {
    val = e;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      console.log(exn[1]);
      Process.exit(1);
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    console.log("Listening at http://localhost:5000");
    return /* () */0;
  }
  
}

var server = Express.App[/* listen */19](app, /* Some */[5000], /* Some */[onListen], /* () */0);

var port = 5000;

exports.app = app;
exports.port = port;
exports.router = router;
exports.onListen = onListen;
exports.server = server;
/* app Not a pure module */
