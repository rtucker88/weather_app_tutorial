// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Express = require("bs-express/src/Express.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var NodeFetch = require("node-fetch");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

var apiId = "<INSERT_API_HERE>";

function jsonDecoder(json) {
  return /* record */[/* zipcode */Json_decode.field("zipcode", Json_decode.string, json)];
}

function encoder(body) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "zipcode",
                body[/* zipcode */0]
              ],
              /* [] */0
            ]);
}

var Body = /* module */[
  /* jsonDecoder */jsonDecoder,
  /* encoder */encoder
];

function raiseIfNone(param) {
  if (param) {
    return param[0];
  } else {
    return Pervasives.failwith("Body is none");
  }
}

function routes(router) {
  Express.Router[/* post */7](router, "/search-location", Express.Middleware[/* from */5]((function (_, req) {
              var json = jsonDecoder(raiseIfNone(Express.Request[/* bodyJSON */3](req)));
              var zipcode = json[/* zipcode */0].length;
              if (zipcode === 5) {
                var partial_arg = Express.Response[/* redirect */14];
                return (function (param) {
                    return partial_arg("/current-weather", param);
                  });
              } else {
                var partial_arg$1 = Express.Response[/* redirect */14];
                return (function (param) {
                    return partial_arg$1("/error", param);
                  });
              }
            })));
  return Express.Router[/* get */4](router, "/search-location-weather/:zipcode", Express.PromiseMiddleware[/* from */0]((function (next, req, res) {
                    return new Promise((function (resolve, _) {
                                  var zipcode = Express.Request[/* params */0](req)["zipcode"];
                                  var zipcode$1 = zipcode !== undefined ? JSON.stringify(zipcode).replace("\"", "").replace("\"", "") : Curry._1(Pervasives.failwith("Zipcode isn't defined"), Curry._2(next, Express.Next[/* route */1], res));
                                  var length = zipcode$1.length;
                                  if (length === 5) {
                                    var apiId$1 = ",us&appid=" + (String(apiId) + "&units=imperial");
                                    var fullUrl = "" + (String("http://api.openweathermap.org/data/2.5/weather?zip=") + ("" + (String(zipcode$1) + ("" + (String(apiId$1) + "")))));
                                    NodeFetch(fullUrl).then((function (prim) {
                                                return prim.json();
                                              })).then((function (str) {
                                              return Promise.resolve(Express.Response[/* sendJson */3](str, res));
                                            })).catch((function () {
                                            return Promise.resolve(Curry._2(next, Express.Next[/* route */1], res));
                                          }));
                                    return /* () */0;
                                  } else {
                                    return resolve(Curry._2(next, Express.Next[/* route */1], res));
                                  }
                                }));
                  })));
}

var Routes = /* module */[/* routes */routes];

exports.apiId = apiId;
exports.Body = Body;
exports.raiseIfNone = raiseIfNone;
exports.Routes = Routes;
/* Express Not a pure module */
